[project]
name = "personal-assistant"
version = "0.1.0"
description = "A multi-agent personal assistant system using ACP servers for meeting and expense management"
authors = [
    { name = "Personal Assistant Team", email = "team@example.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
keywords = ["acp", "agents", "personal-assistant", "meetings", "expenses", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Office/Business :: Financial :: Accounting",
]

dependencies = [
    # Core ACP and AI dependencies
    "acp-sdk>=1.0.0",
    "crewai>=0.141.0",
    "crewai-tools>=0.51.1",
    "mcp>=1.11.0",
    
    # Google AI
    "google-generativeai>=0.8.0",
    
    # Data handling and validation
    "pydantic>=2.8.0",
    "pydantic-settings>=2.5.2",
    
    # Async support
    "nest-asyncio>=1.6.0",
    
    # Date/time utilities
    "python-dateutil>=2.8.0",
    
    # Environment management
    "python-dotenv>=1.0.0",
    
    # Utilities and formatting
    "colorama>=0.4.6",
    "rich>=13.7.0",
    
    # JSON handling (faster than standard json)
    "orjson>=3.9.0",
    
    # Type hints and validation
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    
    # Code quality
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    
    # Development utilities
    "pre-commit>=3.3.0",
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

[project.urls]
Homepage = "https://github.com/your-org/personal-assistant"
Documentation = "https://your-org.github.io/personal-assistant"
Repository = "https://github.com/your-org/personal-assistant.git"
Issues = "https://github.com/your-org/personal-assistant/issues"

[project.scripts]
meeting-server = "personal_assistant.servers.meeting_server:main"
expense-server = "personal_assistant.servers.expense_server:main"
orchestrator-server = "personal_assistant.servers.orchestrator_server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["personal_assistant"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "acp_sdk.*",
    "mcp.*",
    "nest_asyncio.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=personal_assistant",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["personal_assistant"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 